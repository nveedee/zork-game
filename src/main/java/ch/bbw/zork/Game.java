// Game.javapackage ch.bbw.zork;import java.util.ArrayList;import java.util.List;import java.util.Stack;public class Game {    private Parser parser;    private Room currentRoom;    private Stack<String[]> lastRooms;    private Room outside, lab, tavern, gblock, office;    private List<Room> rooms;    private Backpack backpack;    public Game() {        parser = new Parser(System.in);        lastRooms = new Stack<>();        rooms = new ArrayList<>();        backpack = new Backpack(5000);        outside = new Room("outside G block on Peninsula campus");        lab = new Room("lab, a lecture theatre in A block");        tavern = new Room("the Seahorse Tavern (the campus pub)");        gblock = new Room("the G Block");        office = new Room("the computing admin office");        // Add rooms to the list        rooms.add(outside);        rooms.add(lab);        rooms.add(tavern);        rooms.add(gblock);        rooms.add(office);        // initialise room exits        outside.put(null, lab, gblock, tavern);        lab.put(null, null, null, outside);        tavern.put(null, outside, null, null);        gblock.put(outside, office, null, null);        office.put(null, null, null, gblock);        // Add items to rooms        outside.addItem(new Item("Bench", "A wooden bench", 5000));        lab.addItem(new Item("Computer", "A powerful computer", 3000));        tavern.addItem(new Item("Beer", "A pint of beer", 500));        gblock.addItem(new Item("Whiteboard", "A whiteboard with markers", 2000));        office.addItem(new Item("Desk", "A large desk", 7000));        currentRoom = outside;        currentRoom.setVisited(true);    }    public void play() {        printWelcome();        boolean finished = false;        while (!finished) {            Command command = parser.get();            finished = processCommand(command);        }        System.out.println("Thank you for playing. Good bye.");    }    private void printWelcome() {        System.out.println();        System.out.println("Welcome to Zork!");        System.out.println("Zork is a simple adventure game.");        System.out.println("Type 'help' if you need help.");        System.out.println();        System.out.println(currentRoom.longDescription());    }    private boolean processCommand(Command command) {        if (command.isUnknown()) {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help")) {            printHelp();        } else if (commandWord.equals("go")) {            goRoom(command);        } else if (commandWord.equals("quit")) {            if (command.hasSecondWord())                System.out.println("Quit what?");            else                return true;        } else if (commandWord.equals("back")) {            if (lastRooms.isEmpty()) {                System.out.println("Es gibt keinen vorherigen Raum.");            } else {                String[] lastRoomDirection = lastRooms.pop();                currentRoom = getRoomByDescription(lastRoomDirection[0]);                System.out.println("You go " + lastRoomDirection[1] + " to " + currentRoom.longDescription());            }        } else if (commandWord.equals("map")) {            printMap();        } else if (commandWord.equals("items")) {            printItems();        } else if (commandWord.equals("take")) {            takeItem(command);        } else if (commandWord.equals("drop")) {            dropItem(command);        } else if (commandWord.equals("backpack")) {            printBackpack();        }        return false;    }    private void printMap() {        System.out.println("Map of visited rooms:");        for (Room room : rooms) {            if (room.isVisited()) {                System.out.println(room.shortDescription());            }        }    }    private void printItems() {        System.out.println("Items in the current room:");        for (Item item : currentRoom.getItems()) {            System.out.println(item);        }    }    private void printBackpack() {        System.out.println("Items in the backpack:");        for (Item item : backpack.getItems()) {            System.out.println(item);        }        System.out.println("Current weight: " + backpack.getCurrentWeight() + "g");        System.out.println("Max weight: " + backpack.getMaxWeight() + "g");    }    private void takeItem(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Take what?");        } else {            String itemName = command.getSecondWord();            Item itemToTake = null;            for (Item item : currentRoom.getItems()) {                if (item.getName().equalsIgnoreCase(itemName)) {                    itemToTake = item;                    break;                }            }            if (itemToTake == null) {                System.out.println("There is no such item here.");            } else {                if (backpack.addItem(itemToTake)) {                    currentRoom.getItems().remove(itemToTake);                    System.out.println("You have taken the " + itemName + ".");                } else {                    System.out.println("The item is too heavy to carry.");                }            }        }    }    private void dropItem(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Drop what?");        } else {            String itemName = command.getSecondWord();            Item itemToDrop = null;            for (Item item : backpack.getItems()) {                if (item.getName().equalsIgnoreCase(itemName)) {                    itemToDrop = item;                    break;                }            }            if (itemToDrop == null) {                System.out.println("You don't have such an item.");            } else {                if (backpack.removeItem(itemToDrop)) {                    currentRoom.addItem(itemToDrop);                    System.out.println("You have dropped the " + itemName + ".");                } else {                    System.out.println("Error dropping the item.");                }            }        }    }    private void printHelp() {        System.out.println("You are lost. You are alone. You wander");        System.out.println("around at Monash Uni, Peninsula Campus.");        System.out.println();        System.out.println("Your command words are:");        System.out.println(parser.showCommands());    }    private void goRoom(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Go where?");        } else {            String direction = command.getSecondWord();            Room nextRoom = currentRoom.nextRoom(direction);            if (nextRoom == null)                System.out.println("There is no door!");            else {                lastRooms.push(new String[]{currentRoom.shortDescription(), direction});                currentRoom = nextRoom;                currentRoom.setVisited(true);                System.out.println(currentRoom.longDescription());                System.out.println("You are here.");                if (currentRoom.equals(office)) {                    System.out.println("Congratulations! You have won the game.");                    System.exit(0);                }            }        }    }    private Room getRoomByDescription(String description) {        for (Room room : rooms) {            if (room.shortDescription().equals(description)) {                return room;            }        }        return null;    }}